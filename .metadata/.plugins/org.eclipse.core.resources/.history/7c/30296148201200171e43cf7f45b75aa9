package aplicacion;

import aplicacion.asignatura.elemento.test.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import aplicacion.asignatura.Asignatura;
import aplicacion.asignatura.elemento.resolucion.*;

/**
 * Alumno. Clase que contiene todo lo relacionado con los alumnos, como sus datos personales, sus asignaturas y las resoluciones de test realizadas.
 * 
 * @author Adrian Fernandez
 * @author Ricardo Riol
 *
 */
public class Alumno implements java.io.Serializable {
	private static final long serialVersionUID = 1L;
	
	private final String nia;
	private final String contrasena;
	private final String correo;
	private String nombre;
	private String apellidos;
	private List<Resolucion>resoluciones = new ArrayList<Resolucion>();
	private List<Asignatura>asignaturas = new ArrayList<Asignatura>();
	
	/**
	 * Constructor de Alumno.
	 * 
	 * @param nia
	 * @param contrasena
	 * @param correo
	 * @param nombre
	 * @param apellidos
	 */
	public Alumno(String nia, String contrasena, String correo, String nombre, String apellidos) {
		this.nia = nia;
		this.contrasena = contrasena;
		this.correo = correo;
		this.nombre = nombre;
		this.apellidos = apellidos;

	}

	public String getNia() {
		return nia;
	}

	public String getContrasena() {
		return contrasena;
	}

	public String getCorreo() {
		return correo;
	}
	
	public String getNombre() {
		return nombre;
	}

	public String getApellidos() {
		return apellidos;
	}
	
	public List<Resolucion> getResoluciones() {
		return Collections.unmodifiableList(this.resoluciones);
	}
	
	public List<Asignatura> getAsignatura() {
		return Collections.unmodifiableList(this.asignaturas);
	}
	
	/**
	 * Metodo que permite anadir una asignatura a la lista de asignaturas de un alumno.
	 * 
	 * @param asig
	 * @return boolean
	 */
	public boolean anadirAsignatura(Asignatura asig) {
		return this.asignaturas.add(asig);
	}
	
	/**
	 * Metodo que permite eliminar una asignatura de la lista de asignaturas de un alumno.
	 * 
	 * @param asig
	 * @return boolean
	 */
	public boolean eliminarAsignatura(Asignatura asig){
		return this.asignaturas.remove(asig);
	}

	/**
	 * Metodo que permite anadir una resolucion a la lista de resoluciones de un alumno.
	 * Solo es accesible por alumnos.
	 * 
	 * @param res
	 * @return boolean
	 */
	public boolean anadirResolucion(Resolucion res) {
		if (Aplicacion.getInstance().getTipoUsu().equals(TipoUsuario.ALUMNO) == false) {
			return false;
		}
		return this.resoluciones.add(res);
	}
	
	/**
	 * Metodo que permite eliminar una resolucion de la lista de resoluciones de un alumno.
	 * Solo es accesible por alumnos.
	 * 
	 * @param asig
	 * @return boolean
	 */
	public boolean eliminarResolucion(Resolucion res){
		if (Aplicacion.getInstance().getTipoUsu().equals(TipoUsuario.ALUMNO) == false) {
			return false;
		}
		return this.resoluciones.remove(res);
	}
	
	/**
	 * Metodo para enviar una solicitud de ingreso a una asignatura.
	 * Solo es accesible por alumnos.
	 * 
	 * @param sol
	 * @return boolean
	 */
	public boolean enviarSolicitud(Solicitud sol){
		if (Aplicacion.getInstance().getTipoUsu().equals(TipoUsuario.ALUMNO) == false) {
			return false;
		}
		if (this.asignaturas.contains(sol.getAsignatura())){
			return false;
		}
		return sol.getAsignatura().anadirSolicitud(sol);
	}
	
	/**
	 * Metodo para encontar la resolucion de un test realizado por un alumno. 
	 * 
	 * @param test
	 * @return Resolucion
	 */
	public Resolucion encontrarResolucion (Test test){
		for (Resolucion res:this.resoluciones){
			res.getTest().equals(test);
			return res;
		}
		return null;
	}

	@Override
	public String toString() {
		return "Alumno [nia=" + nia + ", correo=" + correo + ", nombre=" + nombre
				+ ", apellidos=" + apellidos +"]";
	}
	
	

	
	
	
	
	
	
	
	

}
